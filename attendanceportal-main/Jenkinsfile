pipeline {
    agent any
    
    environment {
        NODE_VERSION = '18'
        DOCKER_IMAGE = 'attendance-portal'
    }
    
    stages {
        stage('Pre-Build') {
            steps {
                dir('Frontend') {
                    sh 'npm install'  // This will update package-lock.json if needed
                }
                dir('Backend') {
                    sh 'npm install'  // This will update package-lock.json if needed
                }
            }
        }
        
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build Docker Images') {
            steps {
                script {
                    // Build frontend image
                    docker.build("${DOCKER_IMAGE}-frontend:${BUILD_NUMBER}", "./Frontend")
                    
                    // Build backend image
                    docker.build("${DOCKER_IMAGE}-backend:${BUILD_NUMBER}", "./Backend")
                }
            }
        }
        
        stage('Test') {
            steps {
                script {
                    // Run frontend tests
                    dir('Frontend') {
                        sh 'npm test -- --watchAll=false --passWithNoTests'
                    }
                    
                    // Run backend tests
                    dir('Backend') {
                        sh 'npm test -- --watchAll=false --passWithNoTests'
                    }
                }
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    // Stop existing containers
                    sh 'docker compose down || true'
                    
                    // Start services with new images
                    sh 'docker compose up -d --build'
                    
                    // Wait for services to be healthy
                    sh 'sleep 30'
                    
                    // Health check
                    sh 'curl -f http://localhost:3000 || exit 1'
                    sh 'curl -f http://localhost:5000/api/health || exit 1'
                }
            }
        }
    }
    
    post {
        always {
            // Cleanup
            sh 'docker system prune -f || true'
        }
        
        success {
            echo 'Pipeline completed successfully!'
        }
        
        failure {
            echo 'Pipeline failed!'
        }
    }
}
